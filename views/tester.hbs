<body>
    <h1>Tester</h1>
    <div style="display: flex;">
        <h2>Accounts</h2>
        <button id="logoutButton">Log Out</button>
        
    </div>
    <form id="accountForm">
        <input type="email" id="email" placeholder="Enter email" required>
        <input type="password" id="password" placeholder="Enter password" required>
        <button type="submit">Login</button>

        <div style="display: flex;">
            <h3 id="userDisplay">Not logged</h3>
        </div>
    </form>

    <h2>Forums</h2>
    <div style="display: flex;">
        <button onclick="fetchForums()">Refresh</button>
        <input type="text" id="forumName" placeholder="Forum Name" required>
        <input type="text" id="forumDescription" placeholder="Description" required>
        <input type="text" id="bannerImage" placeholder="Banner Image" required>
        <input type="text" id="forumImage" placeholder="Forum Image" required>
        <button onclick="addForum()">Add forum</button>
 
    </div>
    <form id="forumsForm">
        <table id="forumsTable" border="1">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Description</th>
                    <th>Banner Image</th>
                    <th>Forum Image</th>
                    <th>Members</th>
                    <th>Posts</th>
                    <th>Dates</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="forumsList">

            </tbody>
        </table>
        <button type="submit">Update All</button>
    </form>

    <h2>Users</h2>
    <div style="display: flex;">
        <button onclick="fetchUsers()">Refresh</button>
        <input type="text" id="userName" placeholder="User Name" required>
        <input type="text" id="userBio" placeholder="Bio" required>
        <input type="email" id="userEmail" placeholder="Email" required>
        <input type="text" id="userPassword" placeholder="Password" required>
        <input type="text" id="userBanner" placeholder="User Banner" required>
        <input type="text" id="userImage" placeholder="User Image" required>
        <button onclick="addUser()">Add User</button>
 
    </div>
    <form id="usersForm">
        <table id="usersTable" border="1">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Password</th>
                    <th>Bio</th>
                    <th>User Banner</th>
                    <th>User Image</th>
                    <th>Dates</th>
                    <th>Joined Forums</th>
                    <th>Followers</th>
                    <th>Following</th>
                    <th>Posts</th>
                    <th>Comments</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="usersList">

            </tbody>
        </table>
        <button type="submit">Update All</button>
    </form>

    <h2>Posts</h2>

    <form id="postForm">
        <label for="titleInput">Create Post: </label>
        <input type="text" id="titleInput" placeholder="Post Title">
        <input type="text" id="contentInput" placeholder="Post Content">
        <button type="button" onclick="addPost()">Add Post</button>
    </form>

    <label for="forumDropdown">Select a Forum:</label>
    <select id="forumDropdown" name="forumDropdown">
        <option value="">Select a Forum</option> 
    </select>

    <form id="postSection" style="display: flex; flex-direction: column; width: 60%;">
    </form>

    <br><br><br><br><br><br><br><br><br><br><br><br><br><br>

    <script>
        ///// LOGIN CHECKER /////
        // LOOK AT tester.hbs in layouts for currentSession data
        const sessionDisplay = document.getElementById("userDisplay");
        // To check if logged in
        let isLoggedIn;
        window.addEventListener("load", async () => {
            isLoggedIn = await checkSession();
            console.log("Session active: ", isLoggedIn);

            if (isLoggedIn){
                sessionDisplay.textContent = `Logged-in as: ${currentSession.username}`;
            }
        });

        ///////////////////// FORUMS ///////////////////////
        async function fetchForums() {
            try {
                const response = await fetch("/api/get-forums");
                const forums = await response.json();
                const tbody = document.getElementById("forumsList");
                const dropdown = document.getElementById("forumDropdown");

                while (dropdown.hasChildNodes()) {
                    dropdown.removeChild(dropdown.firstChild);
                }

                const baseOption = document.createElement("option");
                baseOption.value = ""
                baseOption.textContent = "Select a Forum"

                dropdown.appendChild(baseOption);

                const sessionResponse = await fetch("/api/session");
                const sessionData = await sessionResponse.json();

                let hasSession = sessionData.success;

                {{!-- console.log("Current Session: ", sessionData); --}}

                let currentUser;

                if (hasSession) { 
                    try {
                        {{!-- console.log("Fetching user with ID: ", sessionData.user.id); --}}

                        const userResponse = await fetch(`/api/get-user-by-id/${sessionData.user.id}`);

                        currentUser = await userResponse.json();
                        {{!-- console.log("Fetched User: ", currentUser); --}}
                    } catch (error) {
                        console.error("Error fetching user: ", error);
                    }
                } else {
                    console.log("No session");
                }

                while (tbody.firstChild) {
                    tbody.removeChild(tbody.firstChild);
                }

                forums.forEach(forum => {
                    const row = document.createElement("tr");

                    const nameCell = document.createElement("td");
                    const nameInput = document.createElement("input");
                    nameInput.type = "text";
                    nameInput.name = `name_${forum._id}`;
                    nameInput.value = forum.name;
                    nameInput.required = true;
                    nameCell.appendChild(nameInput);

                    const descCell = document.createElement("td");
                    const descInput = document.createElement("input");
                    descInput.type = "text";
                    descInput.name = `description_${forum._id}`;
                    descInput.value = forum.description;
                    descInput.required = true;
                    descCell.appendChild(descInput);

                    const bannerCell = document.createElement("td");
                    const bannerInput = document.createElement("input");
                    bannerInput.type = "text";
                    bannerInput.name = `bannerImage_${forum._id}`;
                    bannerInput.value = forum.bannerImage;
                    bannerInput.required = true;
                    bannerCell.appendChild(bannerInput);

                    const forumImageCell = document.createElement("td");
                    const forumImageInput = document.createElement("input");
                    forumImageInput.type = "text";
                    forumImageInput.name = `forumImage_${forum._id}`;
                    forumImageInput.value = forum.forumImage;
                    forumImageInput.required = true;
                    forumImageCell.appendChild(forumImageInput);

                    const membersCell = document.createElement("td");
                    membersCell.textContent = forum.membersCount;

                    const postsCell = document.createElement("td");
                    postsCell.textContent = forum.postsCount;

                    const dateCell = document.createElement("td");
                    dateCell.textContent = `Created: ${new Date(forum.createdAt).toLocaleString('en-US', {
                        month: 'short',
                        day: '2-digit',
                        year: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit',
                        hour12: false
                    })} | Updated: ${new Date(forum.updatedAt).toLocaleString('en-US', {
                        month: 'short',
                        day: '2-digit',
                        year: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit',
                        hour12: false
                    })}`;


                    const actionsCell = document.createElement("td");

                    const deleteButton = document.createElement("button");
                    deleteButton.type = "button";
                    deleteButton.textContent = "Delete";
                    deleteButton.onclick = () => {deleteForum(forum._id)};

                    const editButton = document.createElement("button");
                    editButton.type = "button";
                    editButton.textContent = "Update One";
                    editButton.onclick = () => { updateForum(
                        forum._id,
                        nameInput.value,
                        descInput.value,
                        bannerInput.value,
                        forumImageInput.value
                    )};

                    const joinButton = document.createElement("button");
                    joinButton.type = "button";
                    joinButton.textContent = "Join Forum";

                    const adminText = document.createElement("p");
                    adminText.textContent = "ADMIN"

                    if (hasSession){
                        if (currentUser.joinedForums.includes(forum._id)){
                            joinButton.textContent = "Leave Forum";
                        }
                    }

                    joinButton.onclick = async () => {
                        if (hasSession){
                            try {
                                const response = await fetch("/api/toggle-forum-join", {
                                    method: "PATCH",
                                    headers: { "Content-Type": "application/json" },
                                    body: JSON.stringify({ userId: currentUser._id, forumId: forum._id })
                                });

                                const result = await response.json();

                                if (result.success) {
                                    console.log("Join status changed: ", result.presentStatus);

                                    fetchForums();
                                    fetchUsers();

                                } else {
                                    alert(result.message);
                                }
                            } catch (error) {
                                console.error("Error toggling forum join: ", error);
                            }
    
                        } else {
                            alert("Not logged in");
                        }
                    };

                    actionsCell.appendChild(deleteButton);
                    actionsCell.appendChild(editButton);
                    actionsCell.appendChild(joinButton);

                    if (currentUser && forum.admins.includes(currentUser._id)){
                        actionsCell.appendChild(adminText);
                    }

                    row.appendChild(nameCell);
                    row.appendChild(descCell);
                    row.appendChild(bannerCell);
                    row.appendChild(forumImageCell);
                    row.appendChild(membersCell);
                    row.appendChild(postsCell);
                    row.appendChild(dateCell);
                    row.appendChild(actionsCell);

                    tbody.appendChild(row);

                    /////// Dropdown Options /////
                    const option = document.createElement("option");
                    option.value = forum._id;
                    option.textContent = forum.name;
                    dropdown.appendChild(option);
                });
            } catch (error) {
                console.error("Error fetching forums: ", error);
            }
        }

        async function updateAllForums(event) {
            event.preventDefault();

            const formData = new FormData(event.target);
            const updatedForums = [];

            for (let entry of formData.entries()) {
                const [key, value] = entry;
                const [field, id] = key.split("_");

                let forum = updatedForums.find(f => f._id === id);
                if (!forum) {
                    forum = { _id: id, updatedAt: new Date() };
                    updatedForums.push(forum);
                }
                forum[field] = value;
            }

            try {
                const response = await fetch("/api/update-forums", {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ forums: updatedForums })
                });

                const result = await response.json();

                alert(result.message);
                fetchForums();
            } catch (error) {
                console.error("Error updating forums: ", error);
            }
        }

        document.getElementById("forumsForm").addEventListener("submit", updateAllForums);

        async function updateForum(forumId, newName, newDescription, newBannerImage, newForumImage) {
            try {
                const response = await fetch(`/api/update-forum/${forumId}`, {
                    method: "PATCH",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        name: newName,
                        description: newDescription,
                        bannerImage: newBannerImage,
                        forumImage: newForumImage,
                        updatedAt: new Date()
                    })
                });

                const result = await response.json();

                alert(result.message);
                fetchForums();
            } catch (error) {
                console.error("Error updating forum: ", error);
            }
        }

        async function addForum() {
            const name = document.getElementById("forumName").value.trim();
            const description = document.getElementById("forumDescription").value.trim();
            const bannerImage = document.getElementById("bannerImage").value.trim();
            const forumImage = document.getElementById("forumImage").value.trim();

            if (!currentSession){
                alert("Can't make forum if not logged in");
                return;
            }

            if (!name || !description || !bannerImage || !forumImage) {
                alert("Missing fields");
                return;
            }

            const newForum = {
                name,
                description,
                bannerImage,
                forumImage,
                membersCount: 0,
                postsCount: 0,
                admins: [currentSession.id],
                bannedUsers: []
            };

            try {
                const response = await fetch("/api/add-forum", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(newForum)
                });

                const result = await response.json();

                alert(result.message);
                fetchForums();

                document.getElementById("forumName").value = "";
                document.getElementById("forumDescription").value = "";
                document.getElementById("bannerImage").value = "";
                document.getElementById("forumImage").value = "";
            } catch (error) {
                console.error("Error adding forum: ", error);
            }
        }


        async function deleteForum(forumId) {
            if (confirm("Are you sure you want to delete this forum?")) {
                try {
                    const response = await fetch(`/api/delete-forum/${forumId}`, { method: "DELETE" });
                    const result = await response.json();

                    alert(result.message);
                    fetchForums();
                } catch (error) {
                    console.error("Error deleting forum: ", error);
                }
            }
        }

        //////////////////// USERS //////////////////

        async function fetchUsers() {
            try {
                const response = await fetch("/api/get-users");
                const users = await response.json();
                const tbody = document.getElementById("usersList");

                const sessionResponse = await fetch("/api/session");
                const sessionData = await sessionResponse.json();

                let hasSession = sessionData.success;

                {{!-- console.log("Current Session: ", sessionData); --}}

                let currentUser;

                if (hasSession) { 
                    try {
                        {{!-- console.log("Fetching user with ID: ", sessionData.user.id); --}}

                        const userResponse = await fetch(`/api/get-user-by-id/${sessionData.user.id}`);

                        currentUser = await userResponse.json();
                        {{!-- console.log("Fetched User: ", currentUser); --}}
                    } catch (error) {
                        console.error("Error fetching user: ", error);
                    }
                } else {
                    console.log("No session");
                }

                while (tbody.firstChild) {
                    tbody.removeChild(tbody.firstChild);
                }

                users.forEach(user => {
                    const row = document.createElement("tr");

                    const nameCell = document.createElement("td");
                    const nameInput = document.createElement("input");
                    nameInput.type = "text";
                    nameInput.name = `username_${user._id}`;
                    nameInput.value = user.username;
                    nameInput.required = true;
                    nameCell.appendChild(nameInput);

                    const emailCell = document.createElement("td");
                    const emailInput = document.createElement("input");
                    emailInput.type = "text";
                    emailInput.name = `email_${user._id}`;
                    emailInput.value = user.email;
                    emailInput.required = true;
                    emailCell.appendChild(emailInput);

                    const passCell = document.createElement("td");
                    const passInput = document.createElement("input");
                    passInput.type = "text";
                    passInput.name = `password_${user._id}`;
                    passInput.value = user.password;
                    passInput.required = true;
                    passCell.appendChild(passInput);

                    const bioCell = document.createElement("td");
                    const bioInput = document.createElement("input");
                    bioInput.type = "text";
                    bioInput.name = `bio_${user._id}`;
                    bioInput.value = user.bio;
                    bioInput.required = true;
                    bioCell.appendChild(bioInput);

                    const bannerCell = document.createElement("td");
                    const bannerInput = document.createElement("input");
                    bannerInput.type = "text";
                    bannerInput.name = `bannerImage_${user._id}`;
                    bannerInput.value = user.bannerImage;
                    bannerInput.required = true;
                    bannerCell.appendChild(bannerInput);

                    const userImageCell = document.createElement("td");
                    const userImageInput = document.createElement("input");
                    userImageInput.type = "text";
                    userImageInput.name = `profileImage_${user._id}`;
                    userImageInput.value = user.profileImage;
                    userImageInput.required = true;
                    userImageCell.appendChild(userImageInput);

                    const joinedCell = document.createElement("td");
                    if (user.joinedForums.length > 0) {
                        const list = document.createElement("ul");
                        user.joinedForums.forEach(forum => {
                            const listItem = document.createElement("li");
                            listItem.textContent = forum;
                            list.appendChild(listItem);
                        });
                        joinedCell.appendChild(list);
                    } else {
                        joinedCell.textContent = "None";
                    }

                    const followersCell = document.createElement("td");
                    followersCell.textContent = user.followersCount;

                    const followingCell = document.createElement("td");
                    if (user.following.length > 0) {
                        const list = document.createElement("ul");
                        user.following.forEach(followed => {
                            const listItem = document.createElement("li");
                            listItem.textContent = followed;
                            list.appendChild(listItem);
                        });
                        followingCell.appendChild(list);
                    } else {
                        followingCell.textContent = "None";
                    }

                    const postsCell = document.createElement("td");
                    postsCell.textContent = user.postsCount;

                    const commentsCell = document.createElement("td");
                    commentsCell.textContent = user.commentsCount;

                    const dateCell = document.createElement("td");
                    dateCell.textContent = `Created: ${new Date(user.createdAt).toLocaleString('en-US', {
                        month: 'short',
                        day: '2-digit',
                        year: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit',
                        hour12: false
                    })} | Updated: ${new Date(user.updatedAt).toLocaleString('en-US', {
                        month: 'short',
                        day: '2-digit',
                        year: 'numeric',
                        hour: '2-digit',
                        minute: '2-digit',
                        hour12: false
                    })}`;

                    const actionsCell = document.createElement("td");

                    const deleteButton = document.createElement("button");
                    deleteButton.type = "button";
                    deleteButton.textContent = "Delete";
                    deleteButton.onclick = () => {deleteUser(user._id)};

                    const editButton = document.createElement("button");
                    editButton.type = "button";
                    editButton.textContent = "Update User";
                    editButton.onclick = () => { updateUser(
                        user._id,
                        nameInput.value,
                        emailInput.value,
                        passInput.value,
                        bioInput.value,
                        bannerInput.value,
                        userImageInput.value
                    )};

                    const followButton = document.createElement("button");
                    followButton.type = "button";
                    followButton.textContent = "Follow";

                    const selfText = document.createElement("p");
                    selfText.textContent = "SELF"

                    if (hasSession){
                        if (currentUser.following.includes(user._id)){
                            followButton.textContent = "Unfollow";
                        }
                    }

                    followButton.onclick = async () => {
                        if (hasSession){
                            try {
                                const response = await fetch("/api/toggle-user-follow", {
                                    method: "PATCH",
                                    headers: { "Content-Type": "application/json" },
                                    body: JSON.stringify({ userId: currentUser._id, targetId: user._id })
                                });

                                const result = await response.json();

                                if (result.success) {
                                    console.log("Join status changed: ", result.presentStatus);

                                    fetchForums();
                                    fetchUsers();

                                } else {
                                    alert(result.message);
                                }
                            } catch (error) {
                                console.error("Error toggling user follow: ", error);
                            }
    
                        } else {
                            alert("Not logged in");
                        }
                    };

                    actionsCell.appendChild(deleteButton);
                    actionsCell.appendChild(editButton);
                    actionsCell.appendChild(followButton);

                    if (currentSession !== null && currentSession.id === user._id ){
                        actionsCell.appendChild(selfText);
                    }

                    row.appendChild(nameCell);
                    row.appendChild(emailCell);
                    row.appendChild(passCell);
                    row.appendChild(bioCell);
                    row.appendChild(bannerCell);
                    row.appendChild(userImageCell);
                    row.appendChild(dateCell);
                    row.appendChild(joinedCell);
                    row.appendChild(followersCell);
                    row.appendChild(followingCell);
                    row.appendChild(postsCell);
                    row.appendChild(commentsCell);
                    row.appendChild(actionsCell);

                    tbody.appendChild(row);
                });

            } catch (error) {
                console.error("Error fetching users: ", error);
            }
        }

        async function updateAllUsers(event) {
            event.preventDefault();

            const formData = new FormData(event.target);
            const updatedUsers = [];

            for (let entry of formData.entries()) {
                const [key, value] = entry;
                const [field, id] = key.split("_");

                let user = updatedUsers.find(u => u._id === id);
                if (!user) {
                    user = { _id: id, updatedAt: new Date() };
                    updatedUsers.push(user);
                }
                user[field] = value;
            }

            try {
                const response = await fetch("/api/update-users", {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ users: updatedUsers })
                });

                const result = await response.json();

                alert(result.message);
                fetchUsers();
            } catch (error) {
                console.error("Error updating users: ", error);
            }
        }

        document.getElementById("usersForm").addEventListener("submit", updateAllUsers);

        async function updateUser(userId, newName, newEmail, newPass, newBio, newBannerImage, newProfileImage) {
            try {
                const response = await fetch(`/api/update-user/${userId}`, {
                    method: "PATCH",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        username: newName,
                        email: newEmail,
                        password: newPass,
                        bio: newBio,
                        bannerImage: newBannerImage,
                        profileImage: newProfileImage,
                        updatedAt: new Date()
                    })
                });

                const result = await response.json();

                alert(result.message);
                fetchUsers();
            } catch (error) {
                console.error("Error updating forum: ", error);
            }
        }

        async function addUser() {
            const username = document.getElementById("userName").value.trim();
            const bio = document.getElementById("userBio").value.trim();
            const email = document.getElementById("userEmail").value.trim();
            const password = document.getElementById("userPassword").value.trim();
            const userBanner = document.getElementById("userBanner").value.trim();
            const userImage = document.getElementById("userImage").value.trim();

            if (!username || !bio || !email || !password || !userBanner || !userImage ) {
                alert("Missing fields");
                return;
            }

            const newProfile = {
                username,
                email,
                bio,
                password,
                bannerImage: userBanner,
                profileImage: userImage,
                joinedForums: [],
                followers: 0,
                following: []
            };

            try {
                const response = await fetch("/api/add-user", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(newProfile)
                });

                const result = await response.json();

                alert(result.message);
                fetchUsers();

                document.getElementById("userName").value = "";
                document.getElementById("userEmail").value = "";
                document.getElementById("userBio").value = "";
                document.getElementById("userPassword").value = "";
                document.getElementById("userBanner").value = "";
                document.getElementById("userImage").value = "";
            } catch (error) {
                console.error("Error adding user: ", error);
            }
        }

        async function deleteUser(userId) {
            if (confirm("Are you sure you want to delete this user?")) {
                try {
                    const response = await fetch(`/api/delete-user/${userId}`, { method: "DELETE" });
                    const result = await response.json();

                    alert(result.message);
                    fetchUsers();
                } catch (error) {
                    console.error("Error deleting user: ", error);
                }
            }
        }

        /////////////////// ACCOUNTS ///////////////////////////////////////

        document.getElementById("accountForm").addEventListener("submit", async function login(event) {
            event.preventDefault();

            const email = document.getElementById("email").value.trim();
            const password = document.getElementById("password").value.trim();

            if (!email || !password) {
                alert("Missing fields");
                return;
            }

            try {
                const response = await fetch("/api/login", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ email, password })
                });

                const result = await response.json();

                if (!result.success) {
                    alert(result.message);
                } else {
                    alert("Login successful");
                    location.reload();
                    console.log("User: ", result.user);
                }
            } catch (error) {
                console.error("Error logging in: ", error);
            }
        });


        async function logout() {

            if (currentSession === null){
                alert("Not logged in the first place");
                return;
            }

            try {
                const response = await fetch("/api/logout", { method: "POST" });
                const result = await response.json();

                if (result.success) {
                    alert(result.message);
                    location.reload(); 
                }
            } catch (error) {
                console.error("Error logging out: ", error);
            }
        }

        document.getElementById("logoutButton").addEventListener("click", logout);

        /////////////////// POSTS ///////////////////////////////////////

        async function fetchPostsByForum(forumId) {
            try {
                const postsResponse = await fetch(`/api/get-posts-by-forum/${forumId}`);
                const posts = await postsResponse.json();

                const forumResponse = await fetch(`/api/get-forum-by-id/${forumId}`);
                const forum = await forumResponse.json();

                const sessionResponse = await fetch("/api/session");
                const sessionData = await sessionResponse.json();

                let hasSession = sessionData.success;

                {{!-- console.log("Current Session: ", sessionData); --}}

                let currentUser;

                if (hasSession) { 
                    try {
                        {{!-- console.log("Fetching user with ID: ", sessionData.user.id); --}}

                        const userResponse = await fetch(`/api/get-user-by-id/${sessionData.user.id}`);

                        currentUser = await userResponse.json();
                        {{!-- console.log("Fetched User: ", currentUser); --}}
                    } catch (error) {
                        console.error("Error fetching user: ", error);
                    }
                } else {
                    console.log("No session");
                }

                console.log("CURRENT USER:", currentUser);

                {{!-- console.log("Fetched posts: ", posts);
                console.log("Current forum: ", forum); --}}

                const postSection = document.getElementById("postSection");
                Array.from(postSection.children).forEach(child => {
                    if (!child.matches("button")) {
                        child.remove();
                    }
                });

                for (const post of posts) {
                    const userResponse = await fetch(`/api/get-user-by-id/${post.authorId}`);
                    const user = await userResponse.json();

                    const commentsResponse = await fetch(`/api/get-comments-by-post/${post._id}`);
                    const comments = await commentsResponse.json();

                    {{!-- console.log("Fetched user: ", user); --}}

                    const overallContainer = document.createElement("div");
                    overallContainer.style.display = "flex";
                    overallContainer.style.gap = "10px";
                    overallContainer.style.width = "100%";
                    overallContainer.style.height = "700px";

                    const postContainer = document.createElement("div");
                    postContainer.style.display = "flex";
                    postContainer.style.flexDirection = "column";
                    postContainer.style.width = "100%";
                    postContainer.style.border = "2px solid black";
                    postContainer.style.padding = "10px";
                    postContainer.style.margin = "10px 0";

                    const forumDiv = document.createElement("div");
                    forumDiv.style.display = "flex";
                    forumDiv.style.alignItems = "center";

                    const forumImg = document.createElement("img");
                    forumImg.src = forum.forumImage;
                    forumImg.style.height = "20px";
                    forumImg.style.width = "20px";
                    forumImg.style.marginRight = "5px";

                    const forumTitle = document.createElement("h3");
                    forumTitle.textContent = forum.name;

                    forumTitle.textContent = currentUser && post.authorId === currentUser._id ? `${forum.name} POSTER` : `${forum.name}`

                    const editButton = document.createElement("button");
                    editButton.textContent = "Update Post";
                    editButton.type = "button";
                    editButton.onclick = () => { updatePost(
                        post._id,
                        postTitle.value,
                        postContent.value,
                        forumId
                    )};

                    const deleteButton = document.createElement("button");
                    deleteButton.textContent = "Delete";
                    deleteButton.type = "button";
                    deleteButton.onclick = () => {deletePost(post._id, forumId)};
                    
                    forumDiv.appendChild(forumImg);
                    forumDiv.appendChild(forumTitle);
                    forumDiv.appendChild(editButton);
                    forumDiv.appendChild(deleteButton);

                    const userDiv = document.createElement("div");
                    userDiv.style.display = "flex";
                    userDiv.style.alignItems = "center";

                    const userImg = document.createElement("img");
                    userImg.src = user.profileImage;
                    userImg.style.height = "20px";
                    userImg.style.width = "20px";
                    userImg.style.marginRight = "5px";

                    if (user && user.username) {
                        const userImg = document.createElement("img");
                        userImg.src = user.profileImage;
                        userImg.style.height = "20px";
                        userImg.style.width = "20px";
                        userImg.style.marginRight = "5px";

                        const userName = document.createElement("h3");
                        userName.textContent = user.username;

                        userDiv.appendChild(userImg);
                        userDiv.appendChild(userName);
                    } else {
                        const deletedUser = document.createElement("h3");
                        deletedUser.textContent = "[DELETED]";
                        userDiv.appendChild(deletedUser);
                    }

                    const userName = document.createElement("h3");
                    userName.textContent = user.username;

                    const contentDiv = document.createElement("div");

                    const postTitle = document.createElement("input");
                    postTitle.type = "text";
                    postTitle.name = `title_${post._id}`;
                    postTitle.value = post.title;
                    postTitle.required = true;

                    const lineBreak = document.createElement("br")

                    const postContent = document.createElement("input");
                    postContent.type = "text";
                    postContent.name = `content_${post._id}`;
                    postContent.value = post.content;
                    postContent.required = true;

                    const postDate = document.createElement("h4");
                    postDate.textContent = `Post Date: ${new Date(post.createdAt).toLocaleString()}`;

                    const editedDate = document.createElement("h4");
                    editedDate.textContent = `Edited Date: ${new Date(post.updatedAt).toLocaleString()}`;

                    contentDiv.appendChild(postTitle);
                    contentDiv.appendChild(lineBreak);
                    contentDiv.appendChild(postContent);
                    contentDiv.appendChild(postDate);
                    contentDiv.appendChild(editedDate);

                    const voteDiv = document.createElement("div");
                    voteDiv.style.display = "flex";
                    voteDiv.style.alignItems = "center";

                    const currentVote = currentUser && currentUser.votes.find(vote => {
                            {{!-- console.log("Current vote: ", vote, vote.postId, post); --}}
                            return vote.postId == post._id; 
                        });

                    const voteValue = currentVote ? currentVote.vote : 0;

                    {{!-- console.log(voteValue); --}}

                    const upvoteButton = document.createElement("button");
                    upvoteButton.textContent = voteValue === 1 ? "UPVOTED" : "Upvote";
                    upvoteButton.type = "button";
                    upvoteButton.onclick = () => { toggleVote(post._id, 1, sessionData) };

                    const voteCount = document.createElement("h4");
                    voteCount.textContent = post.voteValue;
                    voteCount.style.margin = "0 10px";

                    const downvoteButton = document.createElement("button");
                    downvoteButton.textContent = voteValue === -1 ? "DOWNVOTED" : "Downvote";
                    downvoteButton.type = "button";
                    downvoteButton.onclick = () => { toggleVote(post._id, -1, sessionData) };

                    const commentCount = document.createElement("h4");
                    commentCount.textContent = `Comments: ${post.commentsCount}`;
                    commentCount.style.margin = "0 10px";

                    voteDiv.appendChild(upvoteButton);
                    voteDiv.appendChild(voteCount);
                    voteDiv.appendChild(downvoteButton);
                    voteDiv.appendChild(commentCount);

                    postContainer.appendChild(forumDiv);
                    postContainer.appendChild(userDiv);
                    postContainer.appendChild(contentDiv);
                    postContainer.appendChild(voteDiv);

                    overallContainer.appendChild(postContainer);

                    const commentsContainer = document.createElement("div");
                    commentsContainer.style.display = "flex";
                    commentsContainer.style.flexDirection = "column";
                    commentsContainer.style.width = "100%";
                    commentsContainer.style.border = "2px solid black";
                    commentsContainer.style.padding = "10px";
                    commentsContainer.style.margin = "10px 0";
                    commentsContainer.style.overflowY = "scroll";

                    overallContainer.appendChild(commentsContainer);

                    for (const comment of comments) {
                        const authorResponse = await fetch(`/api/get-user-by-id/${comment.authorId}`);
                        const author = await authorResponse.json();

                        const authorDiv = document.createElement("div");
                        authorDiv.style.display = "flex";
                        authorDiv.style.alignItems = "center";

                        if (author && author.username) {
                            const authorImg = document.createElement("img");
                            authorImg.src = author.profileImage;
                            authorImg.style.height = "20px";
                            authorImg.style.width = "20px";
                            authorImg.style.marginRight = "5px";

                            const authorName = document.createElement("h3");
                            authorName.textContent = currentUser && post.authorId === currentUser._id ? `${author.username} POSTER` : `${author.username}`

                            authorDiv.appendChild(authorImg);
                            authorDiv.appendChild(authorName);
                        } else {
                            const deletedUser = document.createElement("h3");
                            deletedUser.textContent = "[DELETED]";
                            authorDiv.appendChild(deletedUser);
                        }

                        const editButton = document.createElement("button");
                        editButton.textContent = "Update Comment";
                        editButton.type = "button";
                        editButton.onclick = () => { updateComment(
                            comment._id,
                            commentContent.value,
                            document.getElementById("forumDropdown").value
                        )};

                        const deleteButton = document.createElement("button");
                        deleteButton.textContent = "Delete";
                        deleteButton.type = "button";
                        deleteButton.onclick = () => {deleteComment(comment._id, document.getElementById("forumDropdown").value)};
                        
                        authorDiv.appendChild(editButton);
                        authorDiv.appendChild(deleteButton);

                        const contentDiv = document.createElement("div");
                        const commentContent = document.createElement("input");
                        commentContent.type = "text";
                        commentContent.name = `content_${comment._id}`;
                        commentContent.value = comment.content;
                        commentContent.required = true;

                        const lineBreak = document.createElement("br")

                        const commentDate = document.createElement("h4");
                        commentDate.textContent = `Comment Date: ${new Date(comment.createdAt).toLocaleString()}`;

                        const editedDate = document.createElement("h4");
                        editedDate.textContent = `Edited Date: ${new Date(comment.updatedAt).toLocaleString()}`;

                        contentDiv.appendChild(lineBreak);
                        contentDiv.appendChild(commentContent);
                        contentDiv.appendChild(commentDate);
                        contentDiv.appendChild(editedDate);

                        const voteDiv = document.createElement("div");
                        voteDiv.style.display = "flex";
                        voteDiv.style.alignItems = "center";

                        const currentVote = currentUser && currentUser.commentVotes.find(vote => {
                                return vote.commentId == comment._id; 
                            });

                        const voteValue = currentVote ? currentVote.vote : 0;

                        {{!-- console.log(voteValue); --}}

                        const upvoteButton = document.createElement("button");
                        upvoteButton.textContent = voteValue === 1 ? "UPVOTED" : "Upvote";
                        upvoteButton.type = "button";
                        upvoteButton.onclick = () => { toggleVote(post._id, 1, sessionData) };

                        const voteCount = document.createElement("h4");
                        voteCount.textContent = comment.voteValue;
                        voteCount.style.margin = "0 10px";

                        const downvoteButton = document.createElement("button");
                        downvoteButton.textContent = voteValue === -1 ? "DOWNVOTED" : "Downvote";
                        downvoteButton.type = "button";
                        downvoteButton.onclick = () => { toggleVote(post._id, -1, sessionData) };

                        voteDiv.appendChild(upvoteButton);
                        voteDiv.appendChild(voteCount);
                        voteDiv.appendChild(downvoteButton);

                        commentsContainer.appendChild(authorDiv);
                        commentsContainer.appendChild(contentDiv);
                        commentsContainer.appendChild(voteDiv);
                    }

                    postSection.appendChild(overallContainer);
                };

            } catch (error) {
                console.error("Error fetching posts: ", error);
            }
        }

        document.getElementById("forumDropdown").addEventListener("change", function () {
            const selectedForumId = this.value;
            
            if (selectedForumId) {
                fetchPostsByForum(selectedForumId);
            }
        });

        async function updateAllPosts(event) {
            event.preventDefault();

            const formData = new FormData(event.target);
            const updatedPosts = [];

            for (let entry of formData.entries()) {
                const [key, value] = entry;
                const [field, id] = key.split("_");

                let post = updatedPosts.find(u => u._id === id);
                if (!post) {
                    post = { _id: id, updatedAt: new Date() };
                    updatedPosts.push(post);
                }
                post[field] = value;
            }

            try {
                const response = await fetch("/api/update-posts", {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ posts: updatedPosts })
                });

                const result = await response.json();

                alert(result.message);
                
                const forumDropdown = document.getElementById("forumDropdown");
                fetchPostsByForum(forumDropdown.value);
            } catch (error) {
                console.error("Error updating posts: ", error);
            }
        }

        const postSection = document.getElementById("postSection");
        postSection.addEventListener("submit", updateAllPosts);

        const submitAll = document.createElement("button");
        submitAll.id = "editAllPosts";
        submitAll.type = "submit";
        submitAll.textContent = "Update All";
        postSection.appendChild(submitAll);


        async function updatePost(postId, postTitle, postContent, forumId) {
            try {
                const response = await fetch(`/api/update-post/${postId}`, {
                    method: "PATCH",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        title: postTitle,
                        content: postContent,
                        updatedAt: new Date()
                    })
                });

                const result = await response.json();

                alert(result.message);
                fetchPostsByForum(forumId);
            } catch (error) {
                console.error("Error updating post: ", error);
            }
        }

        async function addPost() {
            const title = document.getElementById("titleInput").value.trim();
            const content = document.getElementById("contentInput").value.trim();

            if (!currentSession){
                alert("Can't make post if not logged in");
                return;
            }

            if (!title || !content || document.getElementById("forumDropdown").value == "") {
                alert("Missing fields or invalid forum");
                return;
            }

            console.log(currentSession);

            const newPost = {
                forumId: document.getElementById("forumDropdown").value,
                authorId: currentSession.id,
                title: title,
                content: content,
                voteValue: 0,
                comments: []
            };

            try {
                const response = await fetch("/api/add-post", {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(newPost)
                });

                const result = await response.json();

                alert(result.message);
                fetchForums();
                fetchUsers();
                fetchPostsByForum(document.getElementById("forumDropdown").value);

                document.getElementById("titleInput").value = "";
                document.getElementById("contentInput").value = "";
            } catch (error) {
                console.error("Error adding post: ", error);
            }
        }

        async function deletePost(postId, forumId) {
            if (confirm("Are you sure you want to delete this post?")) {
                try {
                    const response = await fetch(`/api/delete-post/${postId}`, { method: "DELETE" });
                    const result = await response.json();

                    alert(result.message);
                    fetchForums();
                    fetchUsers();
                    fetchPostsByForum(forumId);
                } catch (error) {
                    console.error("Error deleting post: ", error);
                }
            }
        }

        async function toggleVote(postId, voteValue, sessionData) {
            if (!sessionData.success) {
                alert("Not logged in");
                return;
            }

            try {
                const response = await fetch("/api/toggle-vote", {
                    method: "PATCH",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ userId: sessionData.user.id, postId, voteValue })
                });

                const result = await response.json();

                if (result.success) {
                    fetchPostsByForum(document.getElementById("forumDropdown").value);
                } else {
                    alert(result.error);
                }
            } catch (error) {
                console.error("Error toggling vote:", error);
            }
        }

        ////////////////////// COMMENTS ///////////////

        async function updateComment(commentId, postContent, forumId) {
            try {
                const response = await fetch(`/api/update-comment/${commentId}`, {
                    method: "PATCH",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                        content: postContent,
                        updatedAt: new Date()
                    })
                });

                const result = await response.json();

                alert(result.message);
                fetchPostsByForum(forumId);
            } catch (error) {
                console.error("Error updating post: ", error);
            }
        }

        async function deleteComment(commentId, forumId) {
            if (confirm("Are you sure you want to delete this comment?")) {
                try {
                    const response = await fetch(`/api/delete-comment/${commentId}`, { method: "DELETE" });
                    const result = await response.json();

                    alert(result.message);
                    fetchForums();
                    fetchUsers();
                    fetchPostsByForum(forumId);
                } catch (error) {
                    console.error("Error deleting comment: ", error);
                }
            }
        }

        async function toggleCommentVote(postId, voteValue, sessionData) {
            if (!sessionData.success) {
                alert("Not logged in");
                return;
            }

            try {
                const response = await fetch("/api/toggle-vote", {
                    method: "PATCH",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({ userId: sessionData.user.id, postId, voteValue })
                });

                const result = await response.json();

                if (result.success) {
                    fetchPostsByForum(document.getElementById("forumDropdown").value);
                } else {
                    alert(result.error);
                }
            } catch (error) {
                console.error("Error toggling vote:", error);
            }
        }

        fetchForums();
        fetchUsers();
    </script>
</body>
